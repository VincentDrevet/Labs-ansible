---
- name: "Install webservers"
  hosts: webservers
  become: true
  tasks:
    - name: "Generate SSL certificat"
      ansible.builtin.shell:
        cmd: openssl req -x509 -subj "/C=FR/ST=Ile de France/L=Paris/O=LAB/OU=IT Department/CN=lab.local" -newkey rsa:2048 -keyout lab.key -out lab.cert -days 365 -nodes
      delegate_to: localhost
      run_once: true
      become: false

    - name: "Ensure /etc/nginx/certs directory exist"
      ansible.builtin.file:
        path: /etc/nginx/certs
        state: directory
      become: true

    - name: "Copy certificat and key to web servers"
      ansible.builtin.copy:
        src: "{{item}}"
        dest: "/etc/nginx/certs/{{item}}"
        mode: 0644
      become: true
      loop:
        - lab.cert
        - lab.key
    - name: "Install nginx"
      ansible.builtin.apt:
        name: nginx
        state: latest
      become: true
    - name: "Add custom header"
      ansible.builtin.lineinfile:
        path: /etc/nginx/sites-available/default
        insertafter: ^\s+listen\s\[::\]:80\sdefault_server;
        line: "       add_header X-Webserver {{ ansible_hostname }};"
    - name: "Add SSL settings"
      ansible.builtin.blockinfile:
        path: /etc/nginx/sites-available/default
        insertafter: ^\s+listen\s\[::\]:80\sdefault_server;
        block: |
          listen 443;
          ssl on;
          ssl_certificate /etc/nginx/certs/lab.cert;
          ssl_certificate_key /etc/nginx/certs/lab.key;
    - name: "Restart nginx daemon"
      ansible.builtin.systemd:
        name: nginx
        state: restarted
        enabled: true

- name: "Create HTML dummy page"
  hosts: web-1
  become: true
  tasks:
    - name: "Create Page1.html"
      ansible.builtin.file:
        path: /var/www/html/Page1.html
        state: touch
        owner: www-data
        group: www-data
        mode: 0755
      become: true
    - name: "Add Content to html"
      ansible.builtin.blockinfile:
        marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
        path: /var/www/html/Page1.html
        block: |
          <h1>Page 1</h1>
        owner: www-data
        group: www-data
        mode: 0644
      become: true
    - name: "Create Dummy Folder"
      ansible.builtin.file:
        path: /var/www/html/dummy
        state: directory
        owner: www-data
        group: www-data
        mode: 0755
      become: true
    - name: "Create Dummy html"
      ansible.builtin.file:
        path: "/var/www/html/dummy/{{item}}"
        state: touch
        owner: www-data
        group: www-data
        mode: 0755
      become: true
      loop: 
        - "Dummy1.html"
        - "Dummy2.html"
        - "Dummy3.html"
    - name: "Add dummy content"
      ansible.builtin.blockinfile:
        marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
        path: "/var/www/html/dummy/{{item}}"
        block: |
          <h1>{{ item }}</h1>
        owner: www-data
        group: www-data
        mode: 0644
      become: true
      loop: 
        - "Dummy1.html"
        - "Dummy2.html"
        - "Dummy3.html"
        

- name: "Install HA"
  hosts: ha-proxies
  become: true
  tasks:      
    - name: "Install HAPROXY"
      ansible.builtin.apt:
        name:
          - haproxy
          - hatop
          - keepalived
        state: latest
      become: true

    - name: "Get facts webservers group"
      ansible.builtin.setup:
      delegate_to: "{{ item }}"
      delegate_facts: true
      loop: "{{groups['webservers']}}"
      register: webservers_facts
    
    - name: "Add HAPROXY configuration"
      ansible.builtin.blockinfile:
        path: /etc/haproxy/haproxy.cfg
        block: |
          frontend LAB_FRONTEND
            description My Frontend
            bind *:443
            mode tcp

          default_backend LAB_BACKEND2

          backend LAB_BACKEND2
          mode tcp
          description {% for server in webservers_facts.results %}{{server['ansible_facts']['ansible_hostname']}}{% endfor %}


          {% for server in webservers_facts.results %}
            server {{server['ansible_facts']['ansible_hostname']}} {{server['ansible_facts']['ansible_eth1']['ipv4']['address']}}:443 
          {% endfor %}
          stick-table type ip size 1m expire 30m
          stick match src
          stick store-request src

          listen stats
            bind *:9000
            stats enable
            stats uri /stats
            stats refresh 2s
            stats show-desc
            stats show-legends
            stats auth vincent:P@ssw0rd
            stats admin if TRUE
    - name: "Restart HAPROXY"
      ansible.builtin.systemd:
        name: haproxy
        state: restarted
        enabled: true

    - name: "Create keepalived configuration file"
      ansible.builtin.file:
        path: "/etc/keepalived/keepalived.conf"
        state: touch
        mode: 0644
      become: true
    - name: "Setup keepalived"
      ansible.builtin.blockinfile:
        path: "/etc/keepalived/keepalived.conf"
        block: |
          vrrp_script reload_haproxy {
            script "killall -0 haproxy"
            interval 1
          }

          vrrp_instance VI_1 {
            virtual_router_id 100
            state {{ keepalived_role }}
            priority 100

            advert_int 1
            lvs_sync_daemon_interface eth1
            interface eth1

            authentication {
              auth_type PASS
              auth_pass {{ keepalived_pass }}
            }

            virtual_ipaddress {
              10.10.0.200/32 brd 10.10.0.255 scope global
            }

            track_script {
              reload_haproxy
            }
          }
    - name: "Reload keepalived daemon"
      ansible.builtin.systemd:
        name: keepalived
        state: restarted
        enabled: true
        
            
